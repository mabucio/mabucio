@model IEnumerable<StockViewer.Models.StockExchange>
@{
    ViewBag.Title = "Compare";
}

<h2>Compare</h2>

<script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
<script src="~/Scripts/modernizr-2.6.2.js" type="text/javascript"></script>
<script src="~/Scripts/datevalid.js" type="text/javascript"></script>
<script type="text/javascript">
    var startDate = '@ViewBag.StartDate';
    var endDate = '@ViewBag.EndDate';
</script>

<div id="container">
    <div id="left">
        @using (Html.BeginForm("RefreshCompare", "StockExchanges", FormMethod.Post))
        {   <p>Date Format: yyyy-mm-dd or yyyymmdd.</p>
        <label for="startDate">Start Date:</label>
        <input type="text" id="startDate" name="start" accesskey="start" />
        <br />
            <label for="endDate">End Date:</label>
            <input type="text" id="endDate" name="end" accesskey="end" />
            <br />
            <div style="float:left">
                <input class="button" type="submit" id="submitDate" value="Change date range" />
            </div>
        }

        @using (Html.BeginForm("ResetDateCompare", "StockExchanges", FormMethod.Post))
        {<div style="float:left">
            <input class="button" type="submit" id="restartDate" value="Reset Dates" />
        </div>
        }
        <br />

        @using (Html.BeginForm("Compare", "StockExchanges", FormMethod.Post))
        {<div style="float:left">
            <label for="deposit">Your Deposit:</label>
            <input type="text" id="deposit" name="deposit" accesskey="deposit"/>
        <br />
            <label for="interest">Interest in %</label>
            <input type="text" id="interest" name="interest" accesskey="interest"/>
        <br />
            <input class="button" type="submit" id="depositSubmit" value="Compare"/>
        </div>
        }
    </div>

    <div id="center">
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">

            $(document).ready(function () {
                $("#interest").val(parseFloat(@ViewBag.Interest));
                $("#deposit").val(parseFloat(@ViewBag.Deposit));
                var regEx = new RegExp(/^\d*(,|\0*)\d*$/);

                $("#interest").bind('input', function () {
                    if (regEx.test($(this).val()) || $(this).val() === '') {
                        $(this).css("background-color", "#e6ffe6");
                        startDateOk = true;
                        if (startDateOk && endDateOk)
                            $("#depositSubmit").prop('disabled', false);
                    }
                    else {
                        $(this).css("background-color", "#ff8080");
                        startDateOk = false;
                        $("#depositSubmit").prop('disabled', true);
                    }

                });

                $("#deposit").bind('input', function () {
                    if (regEx.test($(this).val()) || $(this).val() === '') {
                        $(this).css("background-color", "#e6ffe6");
                        endDateOk = true;
                        if (startDateOk && endDateOk)
                            $("#depositSubmit").prop('disabled', false);
                    }
                    else {
                        $(this).css("background-color", "#ff8080");
                        endDateOk = false;
                        $("#depositSubmit").prop('disabled', true);
                    }
                });

                google.charts.load('current', { packages: ['corechart'] });
                google.charts.setOnLoadCallback(drawChart);
                var interest = parseFloat(@ViewBag.Interest);
                var startDeposit = parseFloat(@ViewBag.Deposit);
                var currentDeposit = startDeposit;
                console.log("Start Deposit: " + startDeposit);
                function drawChart() {
                    //Place data from database to array
                    var myArray = [];
                    var initialStockValue = parseFloat(@Model.First().StockValue);
                    console.log("StockValue: " + initialStockValue);
                    @foreach(var item in Model)
                    {
                        @:currentDeposit = currentDeposit + ((currentDeposit * (interest / 100)) / 365);
                        @:stockGain = currentDeposit - startDeposit;
                        @:console.log(stockGain);
                        @:var date = '@Html.DisplayFor(modelItem => item.Date)';
                        @:var dateParts = date.split('-');
                        @:var fixedDate = new Date(dateParts[2], dateParts[1], dateParts[0]);
                        @:myArray.push([fixedDate, stockGain, (startDeposit * (parseFloat('@Html.DisplayFor(modelItem => item.StockValue)') / initialStockValue))-startDeposit]);
                    }

                    // Create the data table.
                    var data = new google.visualization.DataTable();
                    data.addColumn('datetime', 'Date');
                    data.addColumn('number', 'Bank Gain');
                    data.addColumn('number', 'Stock Gain');
                    data.addRows(myArray);
                    // Set chart options
                    var options = {
                        'title': 'Gain Over Time',
                        'width': 800,
                        'height': 400,
                        curveType: 'function',
                    };
                    // Instantiate and draw our chart, passing in some options.
                    var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
                    chart.draw(data, options);
                }

            });
            
        </script>

        <div id="chart_div"></div>
    </div>
</div>